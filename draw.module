<?php
/*
http://api.drupal.org/api/drupal/modules!field_ui!field_ui.api.php/function/hook_field_widget_settings_form/7
http://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_form_alter/7
http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_form/7
http://drupal.org/node/721552
*/
function draw_form(){

}

/**
 * Implements hook_menu().
 *
 * We are providing a default page to illustrate the use of our custom node view
 * mode that will live at http://example.com/?q=examples/node_example
 */
function draw_menu() {
  $items['examples/node_example'] = array(
    'page callback' => 'node_example_page',
    'access arguments' => array('access content'),
    'title' => 'Node Example',
  );
  return $items;
}

/**
 * Callback that builds our content and returns it to the browser.
 *
 * This callback comes from hook_menu().
 *
 * @return
 *   a build array
 *   a renderable array showing a list of our nodes.
 *
 * @see node_load()
 * @see node_view()
 * @see node_example_field_formatter_view()
 */
function draw_page() {
  // We'll start building a renderable array that will be our page.
  // For now we just declare the array.
  $renderable_array = array();
  // We query the database and find all of the nodes for the type we defined.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type AND n.status = :status';
  $result = db_query($sql,
    array(
      ':type' => 'node_example',
      ':status' => 1,
    )
  );
  $renderable_array['explanation'] = array(
    '#markup' => t("Node Example nodes you've created will be displayed here. Note that the color fields will be displayed differently in this list, than if you view the node normally. Click on the node title to see the difference. This is a result of using our 'example_node_list' node view type."),
    );
  // Loop through each of our node_example nodes and instruct node_view
  // to use our "example_node_list" view.
  // http://api.drupal.org/api/function/node_load/7
  // http://api.drupal.org/api/function/node_view/7
  foreach ($result as $row) {
    $node = node_load($row->nid);
    $renderable_array['node_list'][]= node_view($node, 'example_node_list');
  }
  return $renderable_array;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We need to modify the default node entity info by adding a new view mode to
 * be used in functions like node_view() or node_build_content().
 */
function draw_entity_info_alter(&$entity_info) {
  // Add our new view mode to the list of view modes...
  $entity_info['node']['view modes']['example_node_list'] = array(
    'label' => t('Example Node List'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function node_example_field_formatter_info() {
  return array(
    'node_example_colors' => array(
      'label' => t('Node Example Color Handle'),
      'field types' => array('text'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 *
 * @todo: We need to provide a formatter for the colors that a user is allowed
 * to enter during node creation.
 */
function draw_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'draw_canvas':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $element[$delta]['#markup'] = theme('draw_canvas', array());
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function draw_theme($existing, $type, $theme, $path) {
  return array(
    'draw_canvas' => array(
      'variables' => array('color' => NULL),
    ),
  );
}

 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish.  This is a simplifed theme
 * function purely for illustrative purposes.
 */
function theme_draw_canvas($variables) {
  $output = '<div class="canvas"></div>';
  return $output;
}