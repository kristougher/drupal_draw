<?php

function draw_field_widget_info(){
  return array(
    'diagram' => array(
      'label' => t('Diagram'),
      'field types' => array('text_long'),
     // 'settings' => array('rows' => 1, 'cols' => 1),
      'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT, 
      'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    
  );
}
/** 
 * Implements hook_field_widget
 */
function draw_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  dpm($items);
  dpm($instance);
  $element['value']= array(
    '#type' => 'textarea', // hidden',
    '#prefix' => '<div id="draw-diagram"></div>',
    '#attributes' => array('class' => 'draw-diagram-input'),
  //  '#disabled' => TRUE,
    '#default_value' => $items[0]['value'],
  );
  
  return $element; 
}

/**
 * Implements hook_field_formatter_view().
 *
 * @todo: We need to provide a formatter for the colors that a user is allowed
 * to enter during node creation.
 */
function draw_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'draw_canvas':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $element[$delta]['#markup'] = theme('draw_canvas', array());
      }
      break;
  }

  return $element;
}
function draw_form_alter(&$form, &$form_state, $form_id){
dpm($form);
  if ($form['#node_edit_form']) {
    $path = drupal_get_path('module', 'draw') . '/js/';
    drupal_add_js($path . 'raphael-min.js');
 //   drupal_add_js('var paper = Raphael(document.getElementById("draw-diagram"), 500, 640);', 'inline');
    drupal_add_js($path . 'volleyball_base.js');
    drupal_add_js($path . 'draw_basic.js');
    
 //   drupal_add_js($path . 'draw_editor.js');
  }
}
/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function draw_theme($existing, $type, $theme, $path) {
  return array(
    'draw_canvas' => array(
      'variables' => array('color' => NULL),
    ),
  );
}
/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish.  This is a simplifed theme
 * function purely for illustrative purposes.
 */
function theme_draw_canvas($variables) {
  $output = '<div class="canvas"></div>';
  return $output;
}